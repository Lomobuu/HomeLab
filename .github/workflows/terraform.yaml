name: 'Terraform Deployment'

on:
  push:
    branches:
      - Dev
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - Dev
          - Test
          - Main

permissions:
  id-token: write
  contents: read

env:
    location: westeurope
    environment: ${{ github.event.inputs.environment }}

jobs:
  terraform:
        name: Deploy to Azure
        environment: ${{ github.event.inputs.environment || 'Dev' }}
        runs-on: ubuntu-latest
        # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
        defaults:
          run:
            working-directory: .github/Terraform
            shell: bash

        steps:
        # Checkout the repository to the GitHub Actions runner
        - name: Checkout
          uses: actions/checkout@v3

        # Install the latest version of Terraform CLI 
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v1

        - name: Azure Login
          uses: azure/login@v2
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

        # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
        - name: Terraform Init
          run: |
            terraform init \
              -backend-config="resource_group_name=Homelab-management-RG" \
              -backend-config="storage_account_name=tfstatehomelabfozzen" \
              -backend-config="container_name=tfstate-${{ github.event.inputs.environment }}" \
              -backend-config="key=terraform.tfstate" \
              -backend-config="use_oidc=true"


        - name: Terraform Format Check
          run: terraform fmt -check

        # Validate before Planning
        - name: Terraform Validate
          run: terraform validate 

        # Generates an execution plan for Terraform
        - name: Terraform Plan
          run: terraform plan -input=false -var location=$location -var environment=$environment

        - name: Terraform Apply
          run: terraform apply -auto-approve -input=false -var location=$location -var environment=$environment